// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entities/message.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3874775819553457189),
      name: 'Message',
      lastPropertyId: const IdUid(6, 756427638029721213),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5837981592725839283),
            name: 'objectId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5060252124812278924),
            name: 'id',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 2645144433299337435)),
        ModelProperty(
            id: const IdUid(3, 2035672246244168532),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2092424252361707932),
            name: 'nickname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 809444437000794510),
            name: 'icon',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 756427638029721213),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 3874775819553457189),
      lastIndexId: const IdUid(1, 2645144433299337435),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Message: EntityDefinition<Message>(
        model: _entities[0],
        toOneRelations: (Message object) => [],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.objectId,
        setId: (Message object, int id) {
          if (object.objectId != id) {
            throw ArgumentError('Field Message.objectId is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.objectId=${object.objectId}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final messageOffset = fbb.writeString(object.message);
          final nicknameOffset = fbb.writeString(object.nickname);
          final iconOffset = fbb.writeString(object.icon);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectId ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, messageOffset);
          fbb.addOffset(3, nicknameOffset);
          fbb.addOffset(4, iconOffset);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nicknameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final iconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = Message(
              objectId: objectIdParam,
              id: idParam,
              message: messageParam,
              nickname: nicknameParam,
              icon: iconParam,
              createdAt: createdAtParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// see [Message.objectId]
  static final objectId =
      QueryIntegerProperty<Message>(_entities[0].properties[0]);

  /// see [Message.id]
  static final id = QueryStringProperty<Message>(_entities[0].properties[1]);

  /// see [Message.message]
  static final message =
      QueryStringProperty<Message>(_entities[0].properties[2]);

  /// see [Message.nickname]
  static final nickname =
      QueryStringProperty<Message>(_entities[0].properties[3]);

  /// see [Message.icon]
  static final icon = QueryStringProperty<Message>(_entities[0].properties[4]);

  /// see [Message.createdAt]
  static final createdAt =
      QueryIntegerProperty<Message>(_entities[0].properties[5]);
}
